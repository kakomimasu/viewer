{
  "openapi": "3.0.0",
  "info": {
    "title": "procon31",
    "version": "1.0",
    "description": "第31回高専プログラミングコンテスト競技部門の競技サーバのAPI\n\nエンドポイントにアクセスするためにはAPIトークンが必要です\n\nAPIトークンごとに1秒あたり15回までリクエストすることができます.\nこの制限はサーバーを過剰な負荷から守るために存在します. 現実的な使い方において十分な回数のリクエストが可能です.\n制限ギリギリまでのリクエストを保証するものではありません.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/matches": {
      "get": {
        "summary": "試合一覧取得API",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMatchesResponseOK"
                }
              }
            },
            "headers": {
              "x-request-id": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                },
                "required": true,
                "description": "リクエストごとに発行される一意なID"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "operationId": "get-matches",
        "description": "試合の一覧を取得するためのエンドポイントです\n\n以下の場合にエラーを返します (優先度順)\n* 401\n  * リクエストにAPIトークンが含まれていない, または不正な場合\n* 429\n  * 1秒に16回以上リクエストした場合",
        "security": [
          {
            "Header": []
          },
          {
            "Query": []
          }
        ]
      }
    },
    "/matches/{matchID}": {
      "parameters": [
        {
          "schema": {
            "type": "integer",
            "minimum": 1
          },
          "name": "matchID",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "試合状態取得API",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMatchResponseOK"
                }
              }
            },
            "headers": {
              "x-request-id": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                },
                "required": true,
                "description": "リクエストごとに発行される一意なID"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "425": {
            "$ref": "#/components/responses/TooEarly"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "operationId": "get-match",
        "description": "試合中に試合の状態を取得するためのエンドポイントです\n\n以下の場合にエラーを返します (優先度順)\n* 401\n  * リクエストにAPIトークンが含まれていない, または不正な場合\n* 429\n  * 1秒に16回以上リクエストした場合\n* 404\n  * 参加していない試合に対するリクエスト, また存在しない試合IDの場合\n* 425\n  * 試合開始前のリクエストの場合",
        "security": [
          {
            "Header": []
          },
          {
            "Query": []
          }
        ]
      }
    },
    "/matches/{matchID}/action": {
      "parameters": [
        {
          "schema": {
            "type": "integer",
            "minimum": 1
          },
          "name": "matchID",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "行動更新API",
        "operationId": "post-action",
        "responses": {
          "202": {
            "description": "* 正常にリクエストが受理された場合",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostActionResponseOK"
                }
              }
            },
            "headers": {
              "x-request-id": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                },
                "required": true,
                "description": "リクエストごとに発行される一意なID"
              }
            }
          },
          "400": {
            "description": "* ターンとターンの間の時間や試合終了後にアクセスした場合\n* リクエストの中に自分のエージェント以外を指定したアクションが含まれる場合"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "425": {
            "$ref": "#/components/responses/TooEarly"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "description": "試合中にエージェントの行動を更新するためのエンドポイントです\n\n同一ターン中に複数回更新した場合は正常に受理された最後のリクエストが採用されます\n\n並列で更新をリクエストした場合は順序を保証しません\n\nリクエストに含まれていないエージェントの行動は停留となります\n\n以下の場合にエラーを返します (優先度順)\n* 401\n  * リクエストにAPIトークンが含まれていない, または不正な場合\n* 429\n  * 1秒に16回以上リクエストした場合\n* 413\n  * リクエストが16KB以上だった場合\n* 422\n  * リクエストがフォーマットに則ってない場合\n* 404\n  * 参加していない試合に対するリクエスト, また存在しない試合IDの場合\n* 425\n  * 試合開始前のリクエストの場合\n* 400\n  * 遷移ステップや試合終了後にアクセスした場合\n  * リクエストの中に自分のエージェント以外を指定したアクションが含まれる場合\n  * リクエストの中にエージェントIDが重複しているアクションが含まれる場合",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostActionRequest"
              }
            }
          }
        },
        "security": [
          {
            "Header": []
          },
          {
            "Query": []
          }
        ]
      }
    },
    "/teams/me": {
      "get": {
        "summary": "チーム情報取得API",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamInfo"
                }
              }
            },
            "headers": {
              "x-request-id": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                },
                "required": true,
                "description": "リクエストごとに発行される一意なID"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "operationId": "get-team-me",
        "description": "自分のチーム情報を取得するエンドポイントです\n\n以下の場合にエラーを返します (優先度順)\n* 401\n  * リクエストにAPIトークンが含まれていない, または不正な場合\n* 429\n  * 1秒に16回以上リクエストした場合",
        "security": [
          {
            "Header": []
          },
          {
            "Query": []
          }
        ]
      }
    },
    "/teams/{teamID}/matches": {
      "parameters": [
        {
          "schema": {
            "type": "integer",
            "minimum": 1
          },
          "name": "teamID",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "試合一覧取得API",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMatchesResponseOK"
                }
              }
            },
            "headers": {
              "x-request-id": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                },
                "required": true,
                "description": "リクエストごとに発行される一意なID"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "operationId": "get-team-matches",
        "description": "試合開始前に自分に関連する試合の一覧を取得するためのエンドポイントです\n\n以下の場合にエラーを返します (優先度順)\n* 401\n  * リクエストにAPIトークンが含まれていない, または不正な場合\n* 429\n  * 1秒に16回以上リクエストした場合\n* 403\n  * APIトークンと異なるチームのリソースにアクセスした場合",
        "security": [
          {
            "Header": []
          },
          {
            "Query": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ActionPosX": {
        "description": "行動の対象となるX座標(左から1とする), 行動種別が停留の場合のみ0が許容される",
        "type": "integer",
        "minimum": 0,
        "maximum": 24
      },
      "ActionPosY": {
        "description": "行動の対象となるY座標(上から1とする), 行動種別が停留の場合のみ0が許容される",
        "type": "integer",
        "minimum": 0,
        "maximum": 24
      },
      "ActionResult": {
        "description": "行動の結果(無効: -1, 競合: 0, 適用: 1)",
        "type": "integer",
        "enum": [
          -1,
          0,
          1
        ]
      },
      "ActionType": {
        "description": "行動種別(配置: put, 停留: stay, 移動: move, 除去: remove)",
        "type": "string",
        "enum": [
          "put",
          "stay",
          "move",
          "remove"
        ]
      },
      "AgentPosX": {
        "description": "エージェントの現在のX座標(左から1とする), 未配置の場合は0",
        "type": "integer",
        "minimum": 0,
        "maximum": 24
      },
      "AgentPosY": {
        "description": "エージェントの現在のY座標(上から1とする), 未配置の場合は0",
        "type": "integer",
        "minimum": 0,
        "maximum": 24
      },
      "GetMatchResponseOK": {
        "type": "object",
        "properties": {
          "turn": {
            "description": "現在のターン (初期状態は0ターン目とする)",
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "startedAtUnixTime": {
            "description": "試合が始まったUnix時間",
            "type": "integer",
            "minimum": 0
          },
          "width": {
            "description": "競技ボードの横幅",
            "type": "integer",
            "minimum": 12,
            "maximum": 24
          },
          "height": {
            "description": "競技ボードの縦幅",
            "type": "integer",
            "minimum": 12,
            "maximum": 24
          },
          "teams": {
            "type": "array",
            "description": "チームの情報",
            "maxItems": 2,
            "minItems": 2,
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "walls": {
            "type": "array",
            "description": "現在の城壁の状況(城壁以外のマス: 0, 城壁が築かれているマス: チームID)",
            "maxItems": 24,
            "minItems": 12,
            "items": {
              "type": "array",
              "maxItems": 24,
              "minItems": 12,
              "items": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          "areas": {
            "type": "array",
            "description": "現在の陣地の状況(陣地以外のマス: 0, 陣地になっているマス: チームID)",
            "maxItems": 24,
            "minItems": 12,
            "items": {
              "type": "array",
              "maxItems": 24,
              "minItems": 12,
              "items": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          "points": {
            "type": "array",
            "description": "競技ボードのポイント情報",
            "maxItems": 24,
            "minItems": 12,
            "items": {
              "type": "array",
              "maxItems": 24,
              "minItems": 12,
              "items": {
                "type": "integer",
                "minimum": -16,
                "maximum": 16
              }
            }
          },
          "actions": {
            "description": "これまでのターンの全エージェントの最終行動履歴\n\n行動が指定されなかったエージェントの最終行動は停留となります (明示的に停留したときと区別できるように結果が無効, つまりapply=-1になります)\n\n(turn, agentID)で昇順にソートされて返されます",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          }
        },
        "required": [
          "turn",
          "startedAtUnixTime",
          "width",
          "height",
          "teams",
          "walls",
          "areas",
          "points",
          "actions"
        ]
      },
      "Team": {
        "type": "object",
        "properties": {
          "teamID": {
            "description": "チームのID",
            "type": "integer",
            "minimum": 1
          },
          "agent": {
            "description": "エージェントの数",
            "type": "integer",
            "minimum": 6,
            "maximum": 14
          },
          "agents": {
            "description": "エージェントの位置情報",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Agent"
            }
          },
          "areaPoint": {
            "description": "陣地ポイント",
            "type": "integer",
            "minimum": 0
          },
          "wallPoint": {
            "description": "城壁ポイント",
            "type": "integer"
          }
        },
        "required": [
          "teamID",
          "agent",
          "agents",
          "areaPoint",
          "wallPoint"
        ]
      },
      "Agent": {
        "type": "object",
        "properties": {
          "x": {
            "$ref": "#/components/schemas/AgentPosX"
          },
          "y": {
            "$ref": "#/components/schemas/AgentPosY"
          },
          "agentID": {
            "description": "エージェントのID",
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "x",
          "y",
          "agentID"
        ]
      },
      "Action": {
        "type": "object",
        "properties": {
          "x": {
            "$ref": "#/components/schemas/ActionPosX"
          },
          "y": {
            "$ref": "#/components/schemas/ActionPosY"
          },
          "type": {
            "$ref": "#/components/schemas/ActionType"
          },
          "turn": {
            "description": "行動を行ったターン",
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          "agentID": {
            "description": "行動を行ったエージェントのID",
            "type": "integer",
            "minimum": 1
          },
          "apply": {
            "$ref": "#/components/schemas/ActionResult"
          }
        },
        "required": [
          "x",
          "y",
          "type",
          "turn",
          "agentID",
          "apply"
        ]
      },
      "GetMatchesResponseOK": {
        "type": "object",
        "properties": {
          "matches": {
            "type": "array",
            "description": "自分に関連する試合情報",
            "items": {
              "$ref": "#/components/schemas/Match"
            }
          }
        },
        "required": [
          "matches"
        ]
      },
      "Match": {
        "type": "object",
        "properties": {
          "matchID": {
            "description": "試合のID",
            "type": "integer",
            "minimum": 1
          },
          "teams": {
            "description": "試合に参加するチームの情報\n1番目が自チーム, 2番目が敵チームとなる\n",
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "$ref": "#/components/schemas/TeamInfo"
            }
          },
          "turns": {
            "description": "試合のターン数",
            "type": "integer",
            "minimum": 30,
            "maximum": 100
          },
          "operationMillis": {
            "description": "作戦ステップの時間(ミリ秒)",
            "type": "integer",
            "minimum": 3000,
            "maximum": 15000
          },
          "transitionMillis": {
            "description": "遷移ステップの時間(ミリ秒)",
            "type": "integer",
            "minimum": 1000,
            "maximum": 15000
          }
        },
        "required": [
          "matchID",
          "teams",
          "turns",
          "operationMillis",
          "transitionMillis"
        ]
      },
      "PostActionRequest": {
        "type": "object",
        "properties": {
          "actions": {
            "description": "行動",
            "type": "array",
            "maxItems": 14,
            "items": {
              "$ref": "#/components/schemas/ActionRequest"
            }
          }
        },
        "required": [
          "actions"
        ]
      },
      "ActionRequest": {
        "type": "object",
        "properties": {
          "x": {
            "$ref": "#/components/schemas/ActionPosX"
          },
          "y": {
            "$ref": "#/components/schemas/ActionPosY"
          },
          "type": {
            "$ref": "#/components/schemas/ActionType"
          },
          "agentID": {
            "description": "行動するエージェントのID",
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "x",
          "y",
          "type",
          "agentID"
        ]
      },
      "PostActionResponseOK": {
        "type": "object",
        "required": [
          "actions"
        ],
        "properties": {
          "actions": {
            "description": "受理された行動",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionResponse"
            }
          }
        }
      },
      "ActionResponse": {
        "type": "object",
        "required": [
          "x",
          "y",
          "turn",
          "agentID",
          "type"
        ],
        "properties": {
          "x": {
            "$ref": "#/components/schemas/ActionPosX"
          },
          "y": {
            "$ref": "#/components/schemas/ActionPosY"
          },
          "type": {
            "$ref": "#/components/schemas/ActionType"
          },
          "turn": {
            "description": "受理されたターン",
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          "agentID": {
            "description": "行動するエージェントのID",
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "TeamInfo": {
        "description": "チームの情報",
        "type": "object",
        "required": [
          "teamID",
          "name"
        ],
        "properties": {
          "teamID": {
            "description": "チームのID",
            "type": "integer",
            "minimum": 1
          },
          "name": {
            "description": "チームの名前",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "Header": {
        "name": "x-api-token",
        "type": "apiKey",
        "in": "header"
      },
      "Query": {
        "name": "token",
        "type": "apiKey",
        "in": "query"
      }
    },
    "responses": {
      "NotFound": {
        "description": "* 参加していない試合に対するリクエスト, また存在しない試合IDの場合",
        "headers": {
          "x-request-id": {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "リクエストごとに発行される一意なID"
          }
        }
      },
      "Forbidden": {
        "description": "* APIトークンと異なるチームのリソースにアクセスした場合",
        "headers": {
          "x-request-id": {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "リクエストごとに発行される一意なID"
          }
        }
      },
      "Unauthorized": {
        "description": "* リクエストにAPIトークンが含まれていない, または不正な場合"
      },
      "UnprocessableEntity": {
        "description": "* リクエストがフォーマットに則ってない場合",
        "headers": {
          "x-request-id": {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "リクエストごとに発行される一意なID"
          }
        }
      },
      "TooEarly": {
        "description": "* 試合開始前のリクエストの場合",
        "headers": {
          "retry-after": {
            "schema": {
              "type": "integer"
            },
            "description": "試合開始までの秒数"
          },
          "x-request-id": {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "リクエストごとに発行される一意なID"
          }
        }
      },
      "TooManyRequests": {
        "description": "* 1秒に16回以上リクエストした場合"
      },
      "PayloadTooLarge": {
        "description": "* リクエストが16KB以上だった場合"
      }
    }
  }
}